// ## Quest

// ### Quest 1.
// 1) getEven 이라는 함수를 선언하고, 1개의 매개변수(숫자)를 지정합니다.
// 2) 입력된 전달인자의 숫자를 기준으로 0부터 해당하는 수까지 짝수만 구분하여 아래 형식의 문자열로 반환합니다.
// 3) even1 변수를 선언하고 getEven(10) 의 반환값을 할당받아 아래의 문자열 결과값과 같이 console 에 출력되도록 작성합니다.

// ```
// 함수 호출 예시)

// 반환 문자열 형식 : "짝수, 짝수, … 짝수, 짝수."
// getEven(10) 를 호출하여 반환하고 변수를 출력한 결과값 : 2, 4, 6, 8, 10.
// ```


// getEven이라는 함수를 선언하고, 1개의 매개변수(숫자)를 지정합니다. -> 임의의 매겨변수명은 num으로 정하도록 하겠습니다.
function getEven (num)
{

    // 함수 호출 예시를 참고했을 때 큰따옴표(")를 사용하여 string형의 변수 값으로 출력되는 것을 확인, 짝수로 구분되어 순서대로 나열되는 원소들을 큰따옴표(")를 이용하여 받아줄 변수 EvenNum 선언하여 값을 ""로 대입해줍니다.
    var EvenNum = "";


    // 입력된 전달인자의 숫자를 기준으로 0부터 해당하는 수까지 -> for 반복문을 호출하여 초기화 변수 0을 설정, 해당 변수 값인 0부터 계속 정수 1씩 증가하면서 숫자들을 불러오도록 설정합니다.
    for (i = 0; i <= num; i++)
    {

        // (Mistake) if 조건문을 호출하여 구분되어진 짝수 및 문장부호 ,과 .을 먼저 정리하여 문자열에 나열하기 전에, 정리에 편하게 큰따옴표("")로 값을 대입해준 변수 EvenNum에 각 if 조건문에 따라 값이 달리 최종 덧셈 대입되어질 경우 이전에 증가하는 변수 i의 값을 덧셈 대입해줍니다.
        // (Mistake) EvenNum += i;
        // (Mistake) *** 원래는 if 조건문 호출 이전에 대입에 편하게 미리 지역변수를 만들어둘려고 했는데, console 값에서 미리 만든 지역변수의 값이 이어지는 if 조건문들의 조건들에게 영향을 잘못 미치는 것을 바로 깨닫고 잘못 건들였구나 싶어서 바로 주석을 놓았습니다. 각종 조건문을 쓸 때 지역변수의 위치를 원리상으로 이해하면서 제대로 지정해야된다는 것을 깨달아갑니다. ***

        // 짝수만 구분하여 아래 형식의 문자열로 반환 -> if 조건문을 호출, 지속적으로 1씩 증가하는 정수를 2로 나누었을 때 나머지가 0일때 일치하는 조건과 변수 i의 값이 getEven의 매개변수의 값보다 작다는 조건(** 짝수 최댓값이 아닐경우만 불러오기 위해서 설정을 했습니다.), 마지막으로 i는 0과 불일치하다는 조건을 같이 묶어버릴때의 경우를 일단 설정합니다. 
        if ((i % 2 === 0) && (i < num) && (i !== 0))
        {

            // 변수 EvenNum에 짝수 최댓값을 제외한 짝수들이 문자열로 배치될 때마다 변수 i의 값과 문자열 ', '를 덧셈 대입해주어 제시된 함수 호출 예시의 규격에 따르도록 합니다.
            EvenNum += i + ', ';

        }

        // 짝수만 구분하여 아래 형식의 문자열로 반환 -> if 조건문을 호출, 최초 if 조건문의 가장 첫번째 조건이었던 지속적으로 1씩 증가하는 정수를 2로 나누었을 때 나머지가 0일때 일치하는 조건은 그대로 두지만 증가하는 변수 i의 값이 getEven의 매개변수의 값과 일차한다는 조건을 설정해 같이 묶어 맞는 경우를 설정하여 짝수 최댓값을 불러오도록 하겠습니다.
        if ((i % 2 === 0) && (i === num)) // 현재 사이클의 숫자가 짝수이고 전달인자의 값일 때 (마지막 값일 때)
        {

            // 변수 EvenNum에 짝수 최댓값이 문자열로 배치될 때 변수 i의 값과 문자열 '.' 추가하여 제시된 함수 호출 예시의 규격을 완성하도록 합니다.
            EvenNum += i + '.'; 

        }
    }

    // 변수 EvenNum의 값을 반환값으로 설정해줍니다.
    return EvenNum;

}


// even1 변수를 선언하고 getEven(10) 의 반환값을 할당받아 -> 바로 밑의 54행에 해당 제시문을 코딩으로 구현했습니다.
var even1 = getEven(10);

// 아래의 문자열 결과값과 같이 console 에 출력되도록 작성합니다. -> 바로 밑의 57행에 해당 제시문을 코딩으로 구현했습니다.
console.log(even1); // ---> "2, 4, 6, 8, 10."



// ### Quest 2.
// 1) getStar 이라는 함수를 선언하고, 1개의 매개변수(숫자)를 지정합니다.
// 2) 입력된 전달인자가 숫자가 아닌 경우 '숫자만 입력가능합니다.’ 라는 문구가 console 에 출력되고 false 를 반환합니다.
// 3) 입력된 전달인자의 숫자인 경우 전달인지의 수만큼 '*' 가 반복되는 문자열을 반환합니다.
// 4) star1 변수를 선언하고 getStar("text") 의 반환값을 할당받아 아래의 결과값과 같이 console 에 출력되도록 작성합니다.
// 5) star2 변수를 선언하고 getStar(5) 의 반환값을 할당받아 아래의 문자열 결과값과 같이 console 에 출력되도록 작성합니다.

// ```
// 함수 호출 예시)

// getStar("text") 를 호출하여 반환하고 변수를 출력한 결과값 : false
// getStar(5) 를 호출하여 반환하고 변수를 출력한 결과값 : *****
// ```

// getStar 이라는 함수를 선언하고, 1개의 매개변수(숫자)를 지정합니다. -> 임의의 매겨변수명은 num2로 정하도록 하겠습니다.
function getStar (num2)
{
    // 과제2에서 2번, 3번 문항을 참고했을 때 따옴표(')를 사용하여 string형의 변수 값으로 출력되는 것을 확인, if 조건문 이전에 따옴표(')를 이용하여 받아줄 변수 Returning 선언하여 값을 ''로 대입해줍니다.
    var Returning = '';

    // 입력된 전달인자가 숫자가 아닌 경우 -> if 조건문을 호출, 매개변수 num2의 자료형이 숫자형과 불일치하다는 조건을 설정합니다.
    if (typeof num2 !== "number") { 

        // '숫자만 입력가능합니다.’ 라는 문구가 console 에 출력되고 -> 바로 밑의 89행에 해당 제시문을 코딩으로 구현합니다.
        console.log("숫자만 입력가능합니다.");

        // false 를 반환합니다. -> 바로 밑의 92행에 해당 제시문을 코딩으로 구현합니다.
        return false;
    }

    // 입력된 전달인자의 숫자인 경우 -> else if 조건문을 호출, 매개변수 num2의 자료형이 숫자형과 일치하다는 조건을 설정합니다.
    else if (typeof num2 === "number") { 

        // 전달인지의 수만큼 -> 반복문 for문을 호출, 저는 초기화 변수의 값을 1로 넣어서 시작점이 1일때부터 1이 증가하는 것으로 반복문의 조건을 설정했습니다.
        for (var i = 1; i <= num2; i++) { 

            // '*' 가 반복되는 문자열 -> 바로 밑의 102행에 해당 제시문을 코딩으로 구현합니다.
            Returning += '*'; 

        }


    }

    // '*' 가 반복되는 문자열을 반환합니다. -> 바로 밑의 109행에 해당 제시문을 코딩으로 구현합니다.
    return Returning;

}

// star1 변수를 선언하고 getStar("text") 의 반환값을 할당받아 -> 바로 밑의 115행에 해당 제시문을 코딩으로 구현합니다.
var star1 = getStar("text");
// 아래의 결과값과 같이 console 에 출력되도록 작성합니다. -> 바로 밑의 117행에 해당 제시문을 코딩으로 구현합니다.
console.log(star1); // ---> false


// star2 변수를 선언하고 getStar(5) 의 반환값을 할당받아 -> 바로 밑의 121행에 해당 제시문을 코딩으로 구현합니다.
var star2 = getStar(5);
// 아래의 결과값과 같이 console 에 출력되도록 작성합니다. -> 바로 밑의 123행에 해당 제시문을 코딩으로 구현합니다.
console.log(star2); // ---> *****



// ### Quest 3.
// 1) 'Apple', 'Orange', 'Grape', 'Melon' 를 요소로 가지는 fruit 라는 이름의 배열 객체를 생성합니다.
// 2) 'Mango' 를 fruit 배열 객체의 앞에 추가합니다.
// 3) fruit 배열 객체의 ‘Orange' 요소 순서 뒤에 'Cherry' 요소를 추가합니다.
// 4) fruit 배열 객체의 요소 순서를 반대로 변경하고 console 에 배열이 출력되도록 작성합니다.


// 'Apple', 'Orange', 'Grape', 'Melon' 를 요소로 가지는 fruit 라는 이름의 배열 객체를 생성 -> 바로 밑의 135행에 해당 제시문을 코딩으로 구현합니다.
var fruit = ['Apple', 'Orange', 'Grape', 'Melon']; 

// 'Mango' 를 fruit 배열 객체의 앞에 추가 -> 배열상에서 하나 이상의 요소를 배열의 가장 앞에 추가하고자 희망할 때 사용되는 함수 .unshift의 메서드를 사용하여, 바로 밑의 138행에 해당 제시문을 코딩으로 구현합니다.
fruit.unshift('Mango');

// fruit 배열 객체의 ‘Orange' 요소 순서 뒤에 'Cherry' 요소를 추가 -> 배열상에서 원하는 위치에 요소를 추가하거나 삭제하고자 희망할 때 사용되는 함수 .splice의 메서드를 사용하여(오렌지의 바로 다음 순서는 배열 원소 정렬상으로는 3번째이니깐 3, 삭제할 원소는 0개이므로 0, 추가 및 표시하고자 하는 원소의 요소는 'Cherry'이므로 'Cherry', 이렇게 메서드에 총 3가지로 작성), 바로 밑의 141행에 해당 제시문을 코딩으로 구현합니다.
fruit.splice(3, 0, 'Cherry'); 

// fruit 배열 객체의 요소 순서를 반대로 변경 -> 배열상에서 배열 요소들의 순서들을 아예 정반대로 정렬하고자 희망할 때 사용되는 함수 .reverse의 메서드를 사용하여, 바로 밑의 144행에 해당 제시문을 코딩으로 구현합니다.
fruit.reverse();

// console 에 배열이 출력되도록 작성합니다. -> 바로 밑의 147행에 해당 제시문을 코딩으로 구현합니다.
console.log(fruit); // ---> ["Melon", "Grape", "Cherry", "Orange", "Apple", "Mango"]



// ### Quest 4.
// 1) getSize 라는 함수를 선언합니다.
// 2) 윈도우 콘텐츠 영역의 넓이값과 높이값을 아래 객체 형식과 같이 반환합니다.
// 3) winSize 변수를 선언하고 getSize() 의 반환값을 할당받습니다.
// 4) 아래의 문자열 결과값과 같이 console 에 출력되도록 작성합니다.

// ```
// 출력 예시)

// 객체 형식 : { winWidth : __윈도우 콘텐츠 영역의 넓이값__, winHeight : __윈도우 콘텐츠 영역의 높이값__ }
// 문자열 결과값 : 윈도우 콘텐츠의 영역 width : ____ px, height : ____ px 입니다.
// ```


// getSize 라는 함수를 선언합니다. -> 바로 밑의 165행에 해당 제시문을 코딩으로 구현합니다.
function getSize() 
{

    // 출력 예시문의 객체 형식 표현 규칙을 분석, 윈도우 콘텐츠 영역의 넓이값을 받아줄 임의의 지역변수 winWidth를 선언, 변수 winWidth에 윈도우 창 크기에서 콘텐츠의 넓이값을 대표하는 속성값인 window.innerWidth를 대입합니다.
    var winWidth = window.innerWidth;

    // 출력 예시문의 객체 형식 표현 규칙을 분석, 윈도우 콘텐츠 영역의 높이값을 받아줄 임의의 지역변수 winHeight를 선언, 변수 winHeight에 윈도우 창 크기에서 콘텐츠의 높이값을 대표하는 속성값인 window.innerHeight를 대입합니다.
    var winHeight = window.innerHeight;

    // ... 아래 객체 형식과 같이 반환합니다. -> 반환값으로 값을 변환할 임의의 변수 winTotal을 선언하여 출력 예시문의 문자열 결과값의 규칙에 따른 문자열형 값을 작성하여 대입해줍니다.
    var winTotal = "윈도우 콘텐츠의 영역 " + "width : " + winWidth + "px, " + "height : " + winHeight + "px 입니다.";

    // 변수 winTotal의 값을 반환값으로 설정해줍니다.
    return winTotal;

}

// winSize 변수를 선언하고 getSize() 의 반환값을 할당 -> 바로 밑의 183행에 해당 제시문을 코딩으로 구현합니다.
var winSize = getSize();

// 아래의 문자열 결과값과 같이 console 에 출력되도록 작성 -> 바로 밑의 183행에 해당 제시문을 코딩으로 구현합니다.
console.log(winSize); // ---> 윈도우 콘텐츠의 영역 width : 1440px, height : 720px 입니다. // -> 현재 제가 5주차 과제가 담긴 .js 확장자 파일이 연결된 index.html를 열었을때 사파리 윈도우가 전체화면은 아니지만 커서로 임의로 늘릴 경우 맥 화면 해상도에서 최대로 사파리 윈도우를 확대시켰을때 도출될 수 있는 윈도우의 전반적 크기를 예측할 수 있었습니다. 6주차때 교수님 수업에서 윈도우에 대한 확장된 속성에 대해서 더 많이 배워가도록 기대하겠습니다!