/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입)를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)

compareNumbers(10) 을 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."

compareNumbers(20, 10) 을 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."

compareNumbers(10, 20) 을 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.

// 함수 compareNumbers 를 선언, 2개의 숫자타입 매개변수를 임의의 변수명 num_1, num_2로 각각 지정합니다.
function compareNumbers(num_1, num_2) {

    // 조건1 에서 '두번째 매개변수의 전달인자 값이 할당되지 않은 경우' -> if 조건문을 호출, 두번째 매개변수인 num_2에 일치 연산자(===)를 이용해서 선언은 되었지만 값이 할당되지 않은 변수에 쓰이는 값인 undefined와 일치하는지 비교하도록 하여 해당 조건의 코딩을 완성합니다.
    if (typeof num_2 === 'undefined') {
        
        // 조건1 에서 '두번째 매개변수의 값을 찾을 수 없습니다.라는 문자열로 console 에 출력되도록 작성' -> 비교의 경우가 참일 경우, if 조건절 내부에 console 개체의 log() 메서드 형식에 "일치합니다."라는 문자열를 써 줌으로써 console 창에 해당 문자열이 표시가 됩니다.
        console.log('두 번째 매개변수의 값을 찾을 수 없습니다.');

    } else { // 두번째 매개변수인 num_2의 값이 할당된 경우를 위해 else 절도 작성하도록 합니다.

        // 조건2 에서 '첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우' -> if 조건문을 호출, 양쪽에 매개변수 2가지 num_1, num_2를 두고 첫번째 매개변수인 num_1이 두번째 매개변수인 num_2과 값이 값거나 더욱 크다는 비교 연산자 >=를 사용하여 해당 조건의 코딩을 완성합니다.
        if (num_1 >= num_2) {

            // 조건2 에서 '첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.라는 문자열로 console 에 출력되도록 작성' -> if 조건절 내부에 console 개체의 log() 메서드 형식에 '첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.'라는 문자열를 써 줌으로써 console 창에 해당 문자열이 표시가 됩니다.
            console.log('첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.');

        } else { // 조건2 에서 '첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.라는 문자열로 console 에 출력되도록 작성' -> num_1 의 전달인자 값이 num_2 의 전달인자 값보다 작은 경우에는, else 절을 호출하여 console 개체의 log() 메서드 형식에 '첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 작습니다.'라는 문자열를 써 줌으로써 console 창에 해당 문자열이 표시가 됩니다.
            console.log('첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 작습니다.');
        }    
    }
}


// 다음은 compareNumbers 함수 호출에 있어서 매개변수의 값을 지정한 경우들을 나열하겠습니다.

// 두 번째 매개변수의 값을 찾을 수 없습니다.
compareNumbers(10); // -> 말 그대로, 두 번째 매개변수가 선언이 안되었기 때문입니다.

// 첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
compareNumbers(20, 10); // 20 >= 10 // -> if 조건문의 true에 해당됩니다.

// 첫 번째 매개변수에 할당된 전달인자의 값이 두 번째 매개변수에 할당된 전달인자의 값보다 작습니다.
compareNumbers(10, 20); // 10 >= 20 //  -> if 조건문의 false에 해당됩니다.



/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.

----------
함수 호출 예시)

getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15

getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55

getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120

getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800

getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.


// 함수 getTotal을 선언, 숫자형의 첫번째 매개변수와 문자열형의 두번째 매개변수를 임의의 변수명을 num_3, str_1로 지정합니다.
function getTotal(num_3, str_1) {

    // 조건 1-1에서 '1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우' -> if 조건문을 호출, 두번째 매개변수인 num_2에 일치 연산자(===)를 이용하여 문자열형 값 add와 일치하는지 비교하도록 하여 해당 조건의 코딩을 완성합니다.
    if (str_1 === "add") {

        // 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환 -> 총 덧셈 결과의 숫자형을 저장할 리턴값을 대표할 변수 add_final을 선언, 값이 아무것도 없는 상태에서 덧셈 연산한 총 결과수를 수용할것이기 때문에 초기화 값인 0으로 값을 설정해줍니다.
        var add_final = 0;

        // 반복문 for문 호출, 1 부터 첫번째 숫자 타입 매개변수(num)의 전달인자 값까지를 모두 덧셈할것이기 때문에 차례대로 숫자들을 불러오기 위해 for문 조건의 초기화 변수 i를 설정, 첫번째 매개변수보다 같거나 작다는 조건을 설정하여 ++ 증감 연산자를 사용해주어 첫번째 매개변수와 같아질때까지 증가해주도록 하여 모든 값들을 불러온 뒤 add_final 변수에 불러온 값들을 모두 저장하기 위해 기존 변수 값에 값을 계속 더해줄 대입 연산자 +=를 호출하여 변수에 해당 값들을 모두 덧셈해줍니다.
        for (i = 1; i <= num_3; i++) {
            add_final += i;
        }
        // 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 모아지고 더해진 결과값을 반환해주기 위한 return 값을 작성합니다.
        return add_final;
    }


    // 조건 1-2에서 '1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우' -> if 조건문을 호출, 두번째 매개변수인 num_2에 일치 연산자(===)를 이용하여 문자열형 값 multiply와 일치하는지 비교하도록 하여 해당 조건의 코딩을 완성합니다.
    if (str_1 === "multiply") {

        // 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환 -> 총 곱셈 결과의 숫자형을 저장할 리턴값을 대표할 변수 multiply_final을 선언, 최초 값이 1인 상태에서 첫번째 매개변수의 값까지 서로 지속적으로 곱셈 연산한 총 결과수를 수용할것이기 때문에 초기화 값인 1로 값을 설정해줍니다.
        var multiply_final = 1;

        // 반복문 for문 호출, 1 부터 첫번째 숫자 타입 매개변수(num)의 전달인자 값까지를 모두 곱셈할것이기 때문에 차례대로 숫자들을 불러오기 위해 for문 조건의 초기화 변수 i를 설정, 첫번째 매개변수보다 같거나 작다는 조건을 설정하여 ++ 증감 연산자를 사용해주어 첫번째 매개변수와 같아질때까지 증가해주도록 하여 모든 값들을 불러온 뒤 add_final 변수에 불러온 값들을 모두 저장하기 위해 기존 변수 값에 값을 계속 곱해줄 대입 연산자 *=를 호출하여 변수에 해당 값들을 모두 곱셈해줍니다.
        for (i = 1; i <= num_3; i++) {
            multiply_final *= i;
        }
        // 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 모아지고 곱해진 결과값을 반환해주기 위한 return 값을 작성합니다.
        return multiply_final;
    }


    // 조건 1-3에서 '1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우' -> if 조건문을 호출, 먼저 첫번째 매개변수의 전달인자 값과 문자열형 "add"를 불일치 연산자(!==)를 두고 일치하지 않는다는 연산을 이용해 조건 1-1의 경우와 반대가 비교 연산을 설정, 그 다음 첫번째 매개변수의 전달인자 값과 문자열형 "multiply"를 불일치 연산자(!==)를 두고 일치하지 않는다는 연산을 이용해 조건 1-1의 경우와 반대가 비교 연산을 설정하여 논리 연산자 &&(논리곱)을 이용하여 조건 1-1과 조건 1-2에 모두 해당하지 않는 조건들에 대한 여부를 물어보는 비교 연산을 하도록 합니다.
    if ((str_1 !== "add") && (str_1 !== "multiply")) {

        // 조건 1-1과 조건 1-2에 모두 충족하지 않은 나머지 조건의 결과값을 0으로 반환해주기 위한 return 값을 작성합니다.
        return 0;
    }
}


// 변수 all_argument를 선언합니다.
var all_argument;

// 매개변수에 전달인자 지정 후 함수를 호출한 다음, console 개체의 log() 메서드 형식에 변수명을 작성했습니다.
// 값의 출력결과를 아래에서부터 나열해보도록 하겠습니다.


// getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값
all_argument = getTotal(5, "add");
console.log(all_argument); // 1 + 2 + 3 + 4 + 5 // -> 15

// getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값
all_argument = getTotal(10, "add");
console.log(all_argument); // 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 // -> 55

// getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값
all_argument = getTotal(5, "multiply");
console.log(all_argument); // 1 * 2 * 3 * 4 * 5 // -> 120

// getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값
all_argument = getTotal(10, "multiply");
console.log(all_argument); // 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 // -> 3628800

all_argument = getTotal(100);
console.log(all_argument); // 두 번째 매개변수의 전달인자 값 자체가 아예 설정이 되어있지 않기 때문에 else의 조건절 부분에 해당됩니다. // -> 0


/*
Quest 3.
1. var _cars = ['Tesla', 'Audi', 'Volvo', 'Benz'];
2. _cars 배열의 문자열 원소를 아래 결과와 같은 문자열로 console 에 출력되도록 작성합니다.

----------
문자열 출력)

Benz, Volvo, Audi, Tesla.
----------
*/
// Answer 3.

// 배열 _cars 를 선언, 각 문자열 자료형의 개체들인 'Tesla', 'Audi', 'Volvo', 'Benz'를 값으로 할당해줍니다.
var _cars = ['Tesla', 'Audi', 'Volvo', 'Benz'];

// 문자열 출력 조건은 Benz, Volvo, Audi, Tesla 순으로 이루어져야 하므로, 확인해보면 최초 배열 선언후 대입된 객체들의 순서가 정반대로 맨 끝에 있는 Benz 를 시작으로 첫번째 순서에 있었던 Tesla에 다가가야 된다는 사실을 알 수 있습니다. 이 문자열 출력 조건을 충족하기 위해 배열명 뒤에 배열의 순서를 반대로 나열하는 메서드 .reverse()를 호출하여 배열 _cars의 객체 순서를 새롭게 갱신해줍니다.
_cars.reverse();

// console 개체의 log() 메서드 형식에 배열명 _cars를 작성하여 해당 배열의 개체들을 출력해줍니다.
console.log(_cars); // -> 'Benz', 'Volvo', 'Audi', 'Tesla'



/*
Quest 4.
1. searchIndex 라는 함수를 선언하고, 2개의 매개변수(첫번째는 배열, 두번째는 숫자) 를 지정합니다.
2. 1(순서) 함수에 전달된 첫번째 매개변수 배열의 원소들과 두번째 매개변수의 숫자를 비교하여(반복문, 조건문 사용), 일치할 경우 배열의 index(원소 순서) 를 console 에 출력하도록 작성합니다.
3. 1(순서) 함수에 각 매개변수를 지정하여 호출합니다.

----------
함수호출 예시)

searchIndex([8, 10, 13, 30, 50], 30) 를 호출한 경우 : 3
----------
*/
// Answer 4.

// 함수 searchIndex를 선언, 배열형의 첫번째 매개변수와 숫자형의 두번째 매개변수를 임의의 변수명을 arr_1, num_4로 지정합니다.
function searchIndex(arr_1, num_4) {

    // 일단은 지정할려는 배열의 원소와 매개변수의 전달인자 값 숫자를 일치하게 끔 설정하기 위하려면, 배열로 선언된 첫번째 매개변수에서 배열의 index(원소 순서)에 대한 숫자를 구하는 것이 최대 우선점이므로 반복문 for을 호출하여 배열의 객체 순서를 따지는 것을 고려해 초기화 함수 i을 선언해 값 0을 대입, 배열 arr_1의 길이보다 작다는 조건을 두고 증감 연산자 ++을 사용하여 실제 배열의 순서에 해당하는 숫자만큼 증가시켜주도록 합니다.
    for (i = 0; i < arr_1.length; i++) {

        // for문 내부에 if 조건문을 호출, num_4의 값과 일치하는 배열 arr_1의 원소의 원소 호출 변수 선언을 위해 arr_1[i]랑 숫자형 매개변수인 num_4를 두고 사이에 일치 연산자(===)를 둡니다.
        if (arr_1[i] === num_4) {

            // num_4의 값에 일치하는 배열 원소의 순서 값을 console 개체의 log() 메서드 형식에 변수 i를 작성해두어 출력이 됩니다.
            console.log(i);
        }
    }
}

// searchIndex 함수에 매개변수를 지정 후 호출합니다.
searchIndex([8, 10, 13, 30, 50], 30); // arr_1[i] === num_4 // 둘 다 값이 30으로 서로 일치 // -> i의 값은 3입니다.


/*
Quest 5.
1. checkType 이라는 함수를 선언하고, 1개의 매개변수(배열)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열의 원소들의 데이터 타입을 원소로 가지는 새로운 배열을 생성하여(반복문 사용) console 에 출력합니다.
3. 1(순서) 함수에 매개변수를 지정하여 호출합니다.

----------
함수호출 예시)

checkType([10, 'Hello', 'World', {name : 'rh'}, [10, 20]]) 를 호출한 경우
: ['number', 'string', 'string', 'object', 'object']
----------
*/
// Answer 5.

// 임의의 배열 arr_2 를 선언합니다. 해당 배열에 매개변수에 전달된 원소들의 각 데이터 타입을 다시 원소로 가지기 위해 일단 아무 원소도 들어있지 않은 초기화 형태의 빈 대괄호([])만 작성하도록 합니다.
var arr_2 = [];

// 함수 checkType 을 선언하고 매개변수로부터 전달된 원소들의 데이터 타입을 구하여 해당 데이터 타입들을 원소화하기 이전에 정의된 원소들을 전달받을 배열 arr_thing를 지정합니다.
function checkType(arr_things) {

    // 각 배열의 원소들을 세기 위하여 반복문 for을 호출, 초기화 변수 i를 선언하고 값을 0으로 설정, 변수 i는 배열 arr_thing의 길이보다 작도록 설정하며, 증감 연산자 ++를 설정하여 0번째 부터 있는 원소부터 (배열 arr_thing의 길이 - 1)번째 원소까지 셀 수 있도록 for문의 연산 조건을 설정합니다.
    for (i = 0; i < arr_things.length; i++) {

        // 이제 0부터 (arr_things의 값 - 1)번째까지 1씩 증가하는 변수 i의 자리마다 매개변수에서 전달된 arr_things의 자료형 원소들을 자리 잡아 줄 함수를 만들도록 하겠습니다. 
        // 해당 조건을 만족하기 위해 배열의 원하는 지정 자리 순서에 원소를 원하는 갯수만큼 삭제 및 추가를 원하는 원소를 작성할 수 있는, 배열의 원소 항목 수정 함수인 splice를 호출한다음, splice 코딩 완성 조건을 순서대로 원소 삭제 및 추가의 희망 시작 지점을 i, 따로 삭제를 희망하거나 삭제할 원소는 없으므로 0, 그 다음 해당 문제에서 궁극적으로 원하는 매개변수 배열에서 전달된 원소들의 각 데이터 자료형 자체를 값으로 가지게 될 원소 typeof arr_things[i]를 작성하도록 합니다.
            // *** 처음에는 shift 함수를 고려해보았다가 증가하는 변수 i의 자릿 순서의 수만큼 원소가 심어지지 않을 것 같았기에... 시도해보다가 splice 함수로 쓰는 것으로 정했습니다. 과제.5의 제시 문제상으로는 전달된 배열 원소들의 배열 순서 그대로 타입형 원소들을 배열하라는 말은 딱히 없었기 때문에 다른 배열 원소 항목에 수정이 될 수 있는 타 함수들도 가능하다고 생각이 듭니다. (혹시라도 타 함수로 쓸 수 있는 경우를 발견하게 된다면 과제에 추가수정이 될 수 있도록 하겠습니다.) ***
        arr_2.splice(i, 0, typeof arr_things[i]);
    }
    // 이제,  매개변수 배열에서 전달된 원소들의 각 데이터 자료형 원소들의 값들을 console에 출력하기 위해 console 개체의 log() 메서드 형식에 변수 i를 작성해두어 출력이 됩니다.
    console.log(arr_2);
}


// checkType 함수에 매개변수를 지정 후 호출한다.
checkType([10, 'Hello', 'World', {name : 'rh'}, [10, 20]]); // 숫자형, 문자형, 문자형, 객체형, 객체형 // -> ['number', 'string', 'string', 'object', 'object']




/*
Quest 6.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.

----------
함수 호출 예시)

getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3

getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 6.



// *** 처음에는 sort 정렬을 이용해서 숫자형 정렬에서 제일 높은 순서에 있는 것을 뽑아서 연산화 해야지~ 했었는데, 아래에 있는 함수 호출의 첫/두번째 예시에서 포함하고 있는 숫자형 원소의 개수도 다르고, 배열안에 포함된 숫자형 의외에 포함된 자료형들의 종류들도 각기 달랐기 때문에.. 데이터의 자료형이 숫자형인 원소들만 선출해서 그 중에 가장 최댓값을 가지는 숫자형 원소를 골라내자는 식으로 방향을 틀게 되었습니다. 혹시 앞서 말했던 sort를 이용한 방법중에서 과제의 조건대로의 형식에 알맞는 방도를 찾으면 과제에 추가 수정이 될 수 있도록 하겠습니다. ***

/*
var arr_3 = [];
var max_num;
var the_num_index;
function getMaxValue(arr_things2) {

    for (i = 0; i < arr_things2.length; i++) {
        if (typeof arr_things2[i] === 'number') {
            arr_3.push(arr_things2[i]);
            arr_3.sort();

            if (arr_3[i - 1] < max_num) {
                var max_num = arr_3[i];
                var the_num_index = i;
            }
        
        }
    }
    return the_num_index;
}
// 일단 기존의 검증 코딩의 경우 .sort() 배열 정렬을 이용한다음 정렬 맨 뒷쪽에 있는 원소를 최댓점으로 얻은 다음 해당 원소의 순서 정렬 숫자를 얻어서 반환값을 얻을려고 했습니다만, 계속해서 함수 호출 예시의 경우의 값이 모두 console에서 undefined가 출력이 됩니다. ㅠ_ㅠ 일단 혹시 몰라 미리 과제를 제출 드리며 조금 더 좋은 방법을 찾게 된다면 과제에 수정이 될 수 있도록 하겠습니다!

*/