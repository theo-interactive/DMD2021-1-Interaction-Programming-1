/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입)를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)

compareNumbers(10) 을 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."

compareNumbers(20, 10) 을 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."

compareNumbers(10, 20) 을 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.
function compareNumbers(number1, number2){ //함수 선언 및 매개변수 지정
    //조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성
    if (typeof number2 === 'undefined')
    {
        console.log('두번째 매개변수의 값을 찾을 수 없습니다.');
    }else if(number1 >= number2)
    {
        console.log('첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.');
    }else //작은 경우 아래와 같은 문자열로 console 에 출력되도록 작성합니다.
    {
        console.log('첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.');
    }
    // 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같은 문자열로 console 에 출력되도록 작성
}
compareNumbers(10); //두번째 매개변수의 값을 찾을 수 없습니다. -> 2번째 매개변수의 값을 찾을 수 없음
compareNumbers(20, 10); //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다. -> 20은 10과 비교했을 때 크므로 성립
compareNumbers(10, 20); //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.-> 10과 20을 비교했을 때 작으므로 성립



/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.

----------
함수 호출 예시)

getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15

getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55

getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120

getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800

getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.
function getTotal(num1 , string1){
    if (string1 ==="add")
    {//숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
        var sum = 0;//합을 위한 함수 선언
        for(var i = 0; i<=num1; i++) // 덧셈 연산을 위한 반복문
        {
            sum += i;
        }
        console.log(sum);//결과값
        return sum;//반환
    }
    else if(string1 === "multiply") //두번째 매개변수의 전달인자 값이 "multiply" 인 경우
    { //숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
        var mul = 1; //값을 설정하지 않을경우 NaN이되고 , 0을 설정할경우 계속 곱해도 0이 나오므로 1로 설정
        for(var i = 1; i<=num1; i++) // 곱셈 연산을 위한 반복문
        {
            mul *= i;
        }
        console.log(mul);//결과값
        return mul;//반환
    }else // 모든 조건(1-1, 1-2)이 아닌 경우
    { //결과값 숫자 0 을 반환합니다.
        return 0;
    }
}
getTotal(5, "add"); // 15 -> 문자형이 add와 일치하므로 1부터 5까지의 숫자를 반복문으로 더하고 그 값을 sum에 입력하여 결과값 15를 반환
getTotal(10, "add"); //55 -> 문자형이 add와 일치하므로 1부터 10까지의 숫자를 반복문으로 더하고 그 값을 sum에 입력하여 결과값 55를 반환
getTotal(5, "multiply"); //120 -> 문자형이 multiply와 일치하므로 1부터 5까지의 숫자를 반복문으로 곱하고 그 값을 mul에 입력하여 결과값 120을 반환
getTotal(10, "multiply"); //3628800 -> 문자형이 multiply와 일치하므로 1부터 10까지의 숫자를 반복문으로 곱하고 그 값을 mul에 입력하여 결과값 3628800을 반환
getTotal(100); // 값자체가 설정되어 있지 않기 때문에 콘솔창에 아무것도 뜨지 않음
var re = getTotal(100); //변수를 선언하고 출력
console.log(re);



/*
Quest 3.
1. var _cars = ['Tesla', 'Audi', 'Volvo', 'Benz'];
2. _cars 배열의 문자열 원소를 아래 결과와 같은 문자열로 console 에 출력되도록 작성합니다.

----------
문자열 출력)

Benz, Volvo, Audi, Tesla.
----------
*/
// Answer 3.
var _cars = ['Tesla', 'Audi', 'Volvo', 'Benz'];
// 순서가 거꾸로 되어 있으므로 문자열의 순서를 거꾸로 출력
_cars.reverse();
console.log(_cars); //Benz, Volvo, Audi, Tesla.순서대로 출력됨



/*
Quest 4.
1. searchIndex 라는 함수를 선언하고, 2개의 매개변수(첫번째는 배열, 두번째는 숫자) 를 지정합니다.
2. 1(순서) 함수에 전달된 첫번째 매개변수 배열의 원소들과 두번째 매개변수의 숫자를 비교하여(반복문, 조건문 사용), 일치할 경우 배열의 index(원소 순서) 를 console 에 출력하도록 작성합니다.
3. 1(순서) 함수에 각 매개변수를 지정하여 호출합니다.

----------
함수호출 예시)

searchIndex([8, 10, 13, 30, 50], 30) 를 호출한 경우 : 3
----------
*/
// Answer 4.
function searchIndex (arr1, num2){
//첫번째 매개변수 배열의 원소들과 두번째 매개변수의 숫자를 비교하여
        for(var i= 0; i<arr1.length; i++){ //i의 값을 구할 조건문사용. 배열 5개보다 작을 때 반복을 하므로 0부터 4까지 입력이 되고 마지막에 1을 더해 5로 출력이된다.
            if (arr1[i] == num2){
                //i의 값이 num2와 일치할 경우 출력
                console.log(arr1);
            }
        }
}
searchIndex([8, 10, 13, 30, 50], 30);



/*
Quest 5.
1. checkType 이라는 함수를 선언하고, 1개의 매개변수(배열)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열의 원소들의 데이터 타입을 원소로 가지는 새로운 배열을 생성하여(반복문 사용) console 에 출력합니다.
3. 1(순서) 함수에 매개변수를 지정하여 호출합니다.

----------
함수호출 예시)

checkType([10, 'Hello', 'World', {name : 'rh'}, [10, 20]]) 를 호출한 경우
: ['number', 'string', 'string', 'object', 'object']
----------
*/
// Answer 5.
var newarr2 = []; // 데이터 타입을 원소로 가지는 새로운 배열 선언
function checkType (arr2){ //함수선언
    for(var i= 0; i<arr2.length; i++){
        // 배열의 특정 지점에서부터 수정, 추가, 삭제하는 spline 사용
        //splice (시작지점, 삭제할 원소의 개수, 추가할 원소)
        newarr2.splice(i,0,typeof arr2[i]);
        //새로운 배열 생성후, 원래의 배열을 데이터 타입으로 변환
    }
    console.log(newarr2);
}
checkType([10, 'Hello', 'World', {name : 'rh'}, [10, 20]]);





/*
Quest 6.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.

----------
함수 호출 예시)

getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3

getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 6.
var newarr3 = [];
function getMaxValue (arr3){

    for(var i = 0; i < arr3.length; i++)
    { //모든배열언급
        if (typeof arr3[i] === 'number'){//배열 원소들의 숫자 값들을 비교하기 위한 숫자 골라내기 
            newarr3.push(arr3[i]); //원소의 뒤쪽에 배열추가
            var max = newarr3[0] // 가장 큰값하나를 나타낼 변수
            if(max < arr3[i]){ // max 와 배열의 값을 하나씩 비교하여 가장 큰 값을 넣도록해줌
                max = arr3[i];
                var maxa = i; // 조건에 충족되는 i의 값을 나타낼 변수 선언
            }
        }
    }
    console.log(maxa);//출력
}
getMaxValue([10, -4, 7, 100, "hello", -50]);
getMaxValue([-400, "world", 60, 0, {}, 1000]);

